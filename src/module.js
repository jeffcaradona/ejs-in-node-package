console.log('IN module.js');

let ejs = require('ejs');

let moduleData = {
    message: '',
    port: null
}


/**
 * The function `renderList` logs a message and renders an HTML file using EJS, passing in a
 * `moduleData` object.
 * @returns the HTML generated by rendering the "list.ejs" file with the provided "moduleData" object.
 */
async function renderList() {
    console.log('IN test_moddule.renderList()');    
    const html = await ejs.renderFile('./src/views/partials/list.ejs',{moduleData:moduleData})
    return html
} 


const fncPromises = {
    renderList : renderList
}

const middleware = {
    /* The `init` function is a middleware function that is used to initialize the `test_module` object
    and attach it to the `req` and `res` objects. */
    init: () => {
        return (req, res, next) => {
            console.log('IN test_moddule.init() callback');
            res.test_module = moduleData;
            req.test_module = moduleData;

            if (typeof (moduleData) == 'undefined') console.error('moduleData undefined');
            if (typeof (res.test_module) == 'undefined') console.error('res.test_module undefined');
            if (typeof (req.test_module) == 'undefined') console.error('res.test_module undefined');
            next();
        }
    },
    /* The `setPort` function is a middleware function that sets the `port` property of the
    `moduleData` object to the provided `port` value. It also returns another middleware function
    that logs a message and calls the `next` function to continue the middleware chain. This allows
    the `setPort` function to be used as middleware in an Express application. */
    setPort: (port) => {
        console.log(`IN test_moddule.setPort('${port}') `);
        try {
            moduleData.port = port;
        } catch (e) {
            console.error(e);
        }

        return (req, res, next) => {
            console.log('IN test_moddule.setPort() callback ');
            next();
        }
    },
    setMessage: (message) => {
        console.log(`IN test_moddule.setMessage('${message}') `);

        try {
            moduleData.message = message;
        } catch (e) {
            console.error(e);
        }
        return (req, res, next) => {
            console.log('IN test_moddule.setMessage() callback ');
            next()
        };
    }
}

module.exports = { middleware,fncPromises };